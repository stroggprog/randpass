#!/usr/bin/php
<?php
/*
	Copyright 2020, 2024 Philip P. Ide
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with this program. If not, see
    <https://www.gnu.org/licenses/>.
*/

define( "VER", "2.0.4" );

$parse = array( "len" => 64, "help" => false, "grid" => false, "quiet" => false,
				"limit" => false, "echo" => false, "porig" => false );

$origin = "1!2\"34\$5%6^7&8*9(0)-_=+qQwWeErRtTyYuUiIoOpP[{]}aAsSdDfFgGhHjJkKlL;:'@#~zZxXcCvVbBnNmM,<.>/?`|";

function cmdParameters(){
	global $argc, $argv, $parse;
	for( $a = 1; $a < $argc; $a++ ){

		$token = strtolower($argv[$a]);
		if( substr( $token, 0, 1 ) == "-" ){
			if( strpos($token, "e") ) $parse["echo"] = true;
			if( strpos($token, "g") ) $parse["grid"] = true;
			if( strpos($token, "h") ) $parse["help"] = true;
			if( strpos($token, "l") ) $parse["limit"] = true;
			if( strpos($token, "p") ) $parse["porig"] = true;
			if( strpos($token, "q") ) $parse["quiet"] = true;
		}
		else if( is_numeric($token) ){
			$parse["len"] = (int)$token;
		}
	}
	if( $parse["help"] ){
		help();
		exit(0);
	}
}

function version(){
	return "RandPass v".VER."\n";
}

function help(){
	fwrite(STDERR,version()."Options:\n".
		"    <n> = number of characters in password returned\n".
		"    -e  = echo password to STDERR (still also goes to STDOUT)\n".
		"    -g  = print randomly generated grid result is generated from\n".
		"    -h  = print this help and exit\n".
		"    -l  = limit output (almost quiet, just version and password)\n".
		"    -p  = print origin and exit\n".
		"    -q  = quiet mode (only print password)\n\n".
		"Options can be strung together, e.g. -gq\n".
		"    -h overrides everything\n".
		"    -p overrides everything except -h\n".
		"    -q overrides -l but not -e\n\n".
		"Note that only the password is output to STDOUT, everything else goes to STDERR,\n".
		"so redirection to a file is safe as only the password is redirected.\n");
}

function makeLineFromLine( $in ){
	$out = "";
	While( strlen($in) > 1 ){
		$v = random_int(0, strlen( $in )-1 );
		$byte = substr($in, $v, 1);
		if( $byte == "ï¿½" ){
			// debug code to catch UTF-8 errors
			echo "$v = $in\n";
		}
		$out .= $byte;
		$in = str_replace( $byte, "", $in );
	}
	return $out;
}

function printGrid( $box ){
	foreach( $box as $o ) fwrite(STDERR,"$o\n");
}

cmdParameters(); // will exit if help requested

$n = strlen($origin);

if( $parse["porig"] ){
	echo "$n\n";
	echo "$origin\n";
	exit(0);
}

$box = array();

for( $a = 0; $a < $n; $a++ ){
	$box[] = makeLineFromLine( $origin );
}

if( $parse["grid"] ) printGrid( $box );

$len = $parse["len"];

$r = "";
for( $i = 0; $i < $len; $i++ ){
	$x = random_int(0, $n-1 );
	$y = random_int(0, $n-1 );
	$r .= substr( $box[$y], $x, 1 );
}

if( !$parse["quiet"] ){
	fwrite(STDERR,version());
	if( !$parse["limit"] ){
		fwrite(STDERR, "$n base chars used\n".
			($n*$n)." randomly organised chars in grid ($n*$n)\n".
			"$len character password generated\n");
	}
}
if( $parse["echo"] ) fwrite(STDERR, "$r\n");
echo "$r\n";
?>
